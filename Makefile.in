## configuration part (done by ./configure) ###############################

ICSHOME = @ICSPATH@
OCAMLSTDLIB = $(shell ocamlc -v | tail -1 | cut -f 4 -d " ")

CC = @CC@
CXX = @CXX@

LIBGCCA = `@CC@ --print-libgcc`
LIBCPP = `@CC@ --print-file-name=libstdc++.a`


OCAMLC   = @OCAMLC@
OCAMLLINK= @OCAMLMKTOP@
OCAMLOPT = @OCAMLOPT@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLDEP = @OCAMLDEP@
OCAMLMKLIB = @OCAMLMKLIB@
OCAMLDOC = @OCAMLDOC@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
LIBS=@LIBS@
MINUS_L_LIBS=@MINUS_L_LIBS@
CPPFLAGS=@CPPFLAGS@
posixos=@posixos@

### end of configuration part ###

SRCDIR = $(ICSHOME)/src
DOCDIR = $(ICSHOME)/doc
HTMLDIR = $(ICSHOME)/html
MANDIR = $(ICSHOME)/man
INCDIR = $(ICSHOME)/include

ifeq ($(MAKELEVEL),0)
	ARCH := $(shell ./config.guess)
        export ARCH
	OBJDIR = ./obj/$(ARCH)
	BINDIR = ./bin/$(ARCH)
	LIBDIR = ./lib/$(ARCH)
	ICSDIR = ./
else
	OBJDIR = .
	BINDIR = ../../bin/$(ARCH)
	LIBDIR = ../../lib/$(ARCH)
	ICSDIR = ../..
endif


### Compilation flags ###

INCLUDE =
CFLAGS =
BFLAGS = $(INCLUDE)

ICSVERSION=2.1

ifeq ($(DEBUG),)
  OFLAGS = $(INCLUDE) -compact -inline 3 -noassert -unsafe
  BFLAGS = -noassert -unsafe
else
  OFLAGS = $(INCLUDE)
endif


### Ocaml sources ###

ML = 	type.ml int.ml \
	weakhash.ml \
	stacks.ml sets.ml maps.ml powermaps.ml subst.ml setunion.ml \
	config.ml \
	check.ml \
	name.ml  \
	bdd.ml \
	euclid.ml \
	polynomial.ml \
	shostak.ml \
	prop.ml \
	nullary.ml literal.ml rename.ml \
	partition.ml \
	tuple.ml \
	cc.ml \
	simplex.ml \
	funarr.ml \
	ics.ml

ICSPARSER = parser.ml lexer.ml 
SMTPARSER = smtBench.ml smtParser.ml smtLexer.ml
PARSERS = $(ICSPARSER) $(SMTPARSER)

##Object files ###

CMO = $(ML:.ml=.cmo)          # Bytecode
CMX = $(ML:.ml=.cmx)          # Object code
CMI = $(ML:.ml=.cmi)          # Interfaces

# ### Building all targets ###

TARGETS= $(BINDIR)/ics \
	$(BINDIR)/ics.byte \
	$(BINDIR)/icstest \
	icslibs

.PHONY : all all-chdir
all: $(OBJDIR) $(LIBDIR) $(BINDIR) $(INCDIR)
	@echo Targets $(TARGETS)
	$(MAKE) -C $(OBJDIR) -f ../../Makefile all-chdir

all-chdir: $(TARGETS)
	@echo 
	@echo ICS Build complete
	@echo 

# ### Building Libraries ###

.PHONY: icslibs

icslibs: $(LIBDIR)/ics.cma $(LIBDIR)/ics.cmxa $(LIBDIR)/libics.a $(LIBDIR)/libics.so icslisp

$(LIBDIR)/ics.cma: $(CMO)
	$(OCAMLMKLIB) -verbose -I $(OBJDIR) -o ics -linkall -custom $(CMO); \
	mv $(OBJDIR)/ics.cma $(LIBDIR)

$(LIBDIR)/ics.cmxa: $(CMX)
	$(OCAMLMKLIB) -verbose -I $(OBJDIR) -o ics -cclib unix.cmxa -cclib nums.cmxa $(CMX); \
	mv $(OBJDIR)/ics.cmxa $(LIBDIR) 

$(OBJDIR)/icsapi.o: $(SRCDIR)/icsapi.c
	$(OCAMLOPT) $(OFLAGS) -c $(SRCDIR)/icsapi.c -I $(OBJDIR) -o $@

$(LIBDIR)/ics.o: $(CMX)
	$(OCAMLOPT) $(OFLAGS) -linkall -output-obj -I $(OBJDIR) -o $@ \
	  unix.cmxa nums.cmxa $(CMX)

$(LIBDIR)/libics.a: $(LIBDIR)/ics.o $(OBJDIR)/icsapi.o
	cp $(OCAMLSTDLIB)/libasmrun.a $@; \
	ar r $@ $(LIBDIR)/ics.o $(OBJDIR)/icsapi.o

$(LIBDIR)/libics.so: $(LIBDIR)/ics.o $(OBJDIR)/icsapi.o
	$(OCAMLMKLIB) -verbose -failsafe -linkall -oc ics \
	  $(LIBDIR)/ics.o $(OBJDIR)/icsapi.o \
	  -lunix -lnums -lasmrun -L$(OCAMLSTDLIB); \
	mv $(OBJDIR)/dllics.so $@

.PHONY: icslisp

icslisp: $(CMX) $(LIBDIR)/ics.o $(OBJDIR)/icsapi.o $(OBJDIR)/ics_lisp_error.o
	$(OCAMLMKLIB) -oc icslisp -verbose -failsafe -I $(OBJDIR) \
	   $(LIBDIR)/ics.o $(OBJDIR)/icsapi.o $(OBJDIR)/ics_lisp_error.o \
	   -lunix -lnums -lasmrun -L$(OCAMLSTDLIB); \
	mv $(OBJDIR)/dllicslisp.so $(LIBDIR)


### Test program

$(BINDIR)/icstest: $(OBJDIR)/icstest.o $(LIBDIR)/libics.a $(INCDIR)/icsapi.h
	$(CC) -o $@ \
	-I $(INCDIR) \
        $(OBJDIR)/icstest.o \
	$(LIBDIR)/libics.a \
	-L$(OCAMLSTDLIB) \
	-lcurses -ldl -lnums -lunix

### Building Interactors ###

ifeq ($(MAKELEVEL),1)
$(BINDIR)/ics:  $(PARSERS:.ml=.cmi) $(CMI) $(CMX) $(PARSERS:.ml=.cmx) main.cmx 
	$(OCAMLOPT) $(OFLAGS) -o $@ \
           unix.cmxa nums.cmxa \
           $(CMX) \
	   $(PARSERS:.ml=.cmx) main.cmx
else
ics: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics
endif


ifeq ($(MAKELEVEL),1)
$(BINDIR)/ics.byte: $(CMO) $(CMI)
	(cd $(OBJDIR); \
	 $(OCAMLLINK) -o $@ unix.cma nums.cma $(CMO))
else
ics.byte: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics
endif

### Generic rules ###

.SUFFIXES: .ml .mli .cmi .cmo .cmx .mll .mly .prof .tex .dvi .ps .gif .pdf

.tex.dvi:
	latex $< && latex $<`

.dvi.ps: 
	dvips $< -o $@

.ps.gif: 
	pstogif $< -o $@

.tex.pdf:
	pdflatex $< && pdflatex $<

.c.o:
	$(OCAMLC) -c -ccopt "$(CPPFLAGS) -o $@"  $<

.mli.cmi:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmo:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(OFLAGS) -c $<

.ml.prof:
	ocamlprof $< > $@


### Dependencies ###

lexer.cmx: parser.cmx

lexer.cmi: parser.cmi lexer.ml
	$(OCAMLC) -c lexer.ml

lexer.ml: lexer.mll parser.cmi
	$(OCAMLLEX) lexer.mll

parser.ml: parser.mly ics.cmi stacks.cmi
	$(OCAMLYACC) parser.mly

parser.cmi: parser.ml ics.cmi stacks.cmi
	$(OCAMLC) -c parser.mli

parser.cmx: ics.cmx

smtBench.cmi: smtBench.ml ics.cmi
	$(OCAMLC) -c smtBench.ml

smtBench.cmx: ics.cmx

smtLexer.cmx: smtParser.cmx

smtLexer.cmi: smtBench.cmi smtParser.cmi smtLexer.ml
	$(OCAMLC) -c smtLexer.ml

smtLexer.ml: smtLexer.mll smtParser.cmi
	$(OCAMLLEX) smtLexer.mll

smtParser.ml: smtParser.mly ics.cmi stacks.cmi
	$(OCAMLYACC) smtParser.mly

smtParser.cmi: smtParser.ml ics.cmi stacks.cmi smtBench.cmi
	$(OCAMLC) -c smtParser.mli

smtParser.cmx: ics.cmx smtBench.cmx

main.cmi: ics.cmi parser.cmi lexer.cmi smtParser.cmi smtLexer.cmi

main.cmx: ics.cmx parser.cmx lexer.cmx smtParser.cmx smtLexer.cmx

.depend: Makefile.in
	(cd $(SRCDIR); \
         $(OCAMLDEP) $(ML) $(ML:.ml=.mli)> ../.depend)


ifeq ($(MAKELEVEL),1)
include $(ICSDIR)/.depend
endif


### Directories ###

$(BINDIR):	
	-umask 022; if test '!' -d $(BINDIR) ; then \
                      mkdir -p $(BINDIR); fi;

$(OBJDIR):
	-umask 022; if test '!' -d $(OBJDIR) ; then \
           mkdir -p $(OBJDIR); fi; 

$(LIBDIR):
	-umask 022; if test '!' -d $(LIBDIR) ; then \
           mkdir -p $(LIBDIR); fi;

$(INCDIR):
	-umask 022; if test '!' -d $(INCDIR) ; then \
	mkdir -p $(INCDIR); \
	ln -f $(SRCDIR)/icsapi.h $(INCDIR)/icsapi.h; \
	fi;

$(HTMLDIR):
	-umask 022; if test '!' -d $(HTMLDIR) ; then \
           mkdir -p $(HTMLDIR); fi;

$(MANDIR):
	-umask 022; if test '!' -d $(MANDIR) ; then \
           mkdir -p $(MANDIR); fi;


### Source file links ###

.PRECIOUS : $(OBJDIR)/%.ml $(OBJDIR)/%.mli $(OBJDIR)/%.mly 
.PRECIOUS : $(OBJDIR)/%.mll $(OBJDIR)/%.c

$(OBJDIR)/%.ml: $(SRCDIR)/%.ml
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mli: $(SRCDIR)/%.mli
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mly: $(SRCDIR)/%.mly
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mll: $(SRCDIR)/%.mll
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.c: $(SRCDIR)/%.c
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)



### Literate Programming

SOURCES = $(CMO:.cmo=.mli) $(CMO:.cmo=.ml)
STYLE = $(DOCDIR)/style.css

.PHONY: doc htmldoc mandoc dep

doc: htmldoc mandoc

htmldoc: $(HTMLDIR)
	(cp $(STYLE) $(HTMLDIR); \
	cd $(OBJDIR); \
	$(OCAMLDOC) -html -all-params -keep-code -sort \
	            -colorize-code -d $(HTMLDIR) $(SOURCES))

mandoc: $(MANDIR)
	(cd $(OBJDIR); \
	$(OCAMLDOC) -man -all-params -keep-code -sort \
	            -colorize-code -d $(HTMLDIR) $(SOURCES))

dep:  $(DOCDIR)/dep.ps $(DOCDIR)/dep.gif

$(DOCDIR)/dep.ps: $(SRC)
	(cd $(SRCDIR); \
	$(OCAMLDEP) -native *.ml *.mli | \
	   ocamldot -fullgraph -landscape -lr -r Ics | \
	   dot -Tps > $(DOCDIR)/dep.ps)

$(DOCDIR)/dep.gif: $(DOCDIR)/dep.ps


### Emacs tags

tags:
	find . -name "*.ml*" | sort -r | xargs \
        etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/module[ \t]+\([^ \t]+\)/\1/"


### Removing generated files

.PHONY: clean

clean::
	rm -f config.cache config.log confdefs.h config.status
	rm -f gmon.out
	rm -rf profile.out
	rm -f $(BINDIR)/*
	rm -f $(LIBDIR)/*
	rm -f $(OBJDIR)/*
	rm -f $(DOCDIR)/*.aux  $(DOCDIR)/*.toc
	rm -f $(DOCDIR)/api.tex
	rm -f $(DOCDIR)/*.bbl $(DOCDIR)/*.log $(DOCDIR)/*.haux $(DOCDIR)/*.dvi
	rm -f $(DOCDIR)/*.ppm $(DOCDIR)/*.blg $(DOCDIR)/*.brf $(DOCDIR)/*.out 
	rm -rf $(HTMLDIR)
	rm -rf $(MANDIR)


### Installatation of binaries ###
install:
	mkdir -p $(bindir)
	mkdir -p $(libdir)
	mkdir -p $(includedir)
	cp $(BINDIR)/ics $(bindir)
	cp $(LIBDIR)/* $(libdir)
	cp $(OBJDIR)/ics.h $(includedir)
        # mkdir -p $(OCAMLSTDLIB)/ics

uninstall:
	rm -f $(bindir)/ics
	rm -f $(libdir)/libics.*
	rm -f $(includedir)/ics.h


### Binary distribution ###

ICS_DIST_DIR="ics-$(ICSVERSION)"
ICS_DIST_TAR="ics-$(ICSVERSION)-bin-$(ARCH).tar.gz"

binary-distribution: all
	@ echo "Building ICS binary distribution..."
	@ rm -r -f $(ICS_DIST_DIR)
	@ mkdir $(ICS_DIST_DIR)
	@ mkdir $(ICS_DIST_DIR)/bin
	@ mkdir $(ICS_DIST_DIR)/lib
	@ mkdir $(ICS_DIST_DIR)/include
	@ cp install.sh $(ICS_DIST_DIR)/
	@ chmod +x $(ICS_DIST_DIR)/install.sh
	@ cp ics.template $(ICS_DIST_DIR)/bin
	@ cp bin/$(ARCH)/ics $(ICS_DIST_DIR)/bin/ics.exec
	@ cp bin/$(ARCH)/ics.byte $(ICS_DIST_DIR)/bin
	@ cp lib/$(ARCH)/* $(ICS_DIST_DIR)/lib
	@ cp include/* $(ICS_DIST_DIR)/include
	@ cp BIN-INSTALL $(ICS_DIST_DIR)/INSTALL
	@ rm -f $(ICS_DIST_TAR)
	@ echo "Building TAR ball..."
	@ tar -cvzf $(ICS_DIST_TAR) $(ICS_DIST_DIR)



