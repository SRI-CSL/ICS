
### configuration part (done by ./configure) #################################

OCAMLSTDLIB = `ocamlc -v | tail -1 | cut -f 4 -d " "`

LIBGMPA = @GMPPATH@/lib/libgmp.a
GMPINCLUDE = -I @GMPPATH@/include

OCAMLC   = @OCAMLC@
OCAMLLINK= @OCAMLMKTOP@
OCAMLOPT = @OCAMLOPT@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLDEP = @OCAMLDEP@

HEVEA = @HEVEA@
OCAMLWEB = @OCAMLWEB@
OCAMLWEBSTY = $$HOME/tex/ocamlweb.sty

WEBHOME = /homes/web/www.icansolve.com

### end of configuration part ################################################

ifeq ($(MAKELEVEL),0)
	ARCH := $(shell bin/config.guess)
        export ARCH
	OBJDIR = ./obj/$(ARCH)
	BINDIR = ./bin/$(ARCH)
	LIBDIR = ./lib/$(ARCH)
	SRCDIR = ./src
	DOCDIR = ./doc
        WEBDIR = ./www.icansolve.com
else
	OBJDIR = .
	BINDIR = ../../bin/$(ARCH)
	LIBDIR = ../../lib/$(ARCH)
	SRCDIR = ../../src
	DOCDIR = ../../doc
        WEBDIR = ../../www.icansolve.com
endif

# Flags

INCLUDE =
CFLAGS = 
BFLAGS = -g $(INCLUDE) # -noassert
OFLAGS = $(INCLUDE) # -noassert
LIBS = -cclib "-lunix $(LIBGMPA)"

# Object files

COBJS = mlgmp.o

CMO = sign.cmo three.cmo \
      gmp.cmo mpa.cmo \
      binrel.cmo \
      hashcons.cmo \
      tools.cmo status.cmo \
      pretty.cmo \
      trace.cmo \
      exc.cmo\
      bitv.cmo \
      extq.cmo dom.cmo endpoint.cmo interval.cmo cnstrnt.cmo \
      name.cmo \
      sym.cmo \
      var.cmo \
      term.cmo \
      interp.cmo theories.cmo \
      veq.cmo \
      veqs.cmo \
      boolean.cmo \
      arith.cmo \
      tuple.cmo \
      bitvector.cmo \
      app.cmo \
      atom.cmo \
      use.cmo \
      subst.cmo \
      symbolic.cmo c.cmo \
      a.cmo \
      t.cmo \
      bv.cmo \
      b.cmo \
      d.cmo \
      cc.cmo \
      th.cmo \
      context.cmo \
      builtin.cmo \
      shostak.cmo \
      symtab.cmo istate.cmo \
      help.cmo \
      parser.cmo lexer.cmo \
      ics.cmo


CMI = $(CMO:.cmo=.cmi)

CMX = $(CMO:.cmo=.cmx)

SRC = $(addprefix $(SRCDIR)/,$(CMO:.cmo=.ml))

.PHONY : all all-chdir
all: $(OBJDIR) $(LIBDIR) $(BINDIR)
	$(MAKE) -C $(OBJDIR) -f ../../Makefile all-chdir

all-chdir: ics $(LIBDIR)/libics.so $(LIBDIR)/libics.a ics.byte
	@echo 
	@echo ICS Build complete
	@echo 


TOPCMO = $(CMO) main.cmo
TOPCMI = $(CMI) 

TOPCMX = $(TOPCMO:.cmo=.cmx)

ifeq ($(MAKELEVEL),1)
ics: $(COBJS) $(TOPCMI) $(TOPCMX)
	$(OCAMLOPT) $(OFLAGS) -o $(BINDIR)/$@ unix.cmxa $(TOPCMX) \
                    $(COBJS) $(LIBS)
else
.PHONY: ics
ics: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics
endif

ifeq ($(MAKELEVEL),1)
ics.byte: $(COBJS) $(TOPCMI) $(TOPCMO)
	$(OCAMLLINK) -g -custom -o $(BINDIR)/$@ unix.cma $(TOPCMO) \
                    $(COBJS) $(LIBS)
else
.PHONY: ics.byte
ics.byte: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics.byte
endif

OBJS = ics_all.o ics_stub.o mlgmp.o

ifneq ("@ALLEGRO@","no")
LISPOBJS = ics.fasl
endif

ics_all.o: $(CMX)
	$(OCAMLOPT) -output-obj -o $@ unix.cmxa $(CMX)

$(LIBDIR)/libics.so: $(OBJS) # $(LISPOBJS)
	gcc -shared -o $(LIBDIR)/libics.so $(OBJS) \
	  $(OCAMLSTDLIB)/libunix.a \
	  $(LIBGMPA) \
          $(OCAMLSTDLIB)/libasmrun.a

$(LIBDIR)/libics.a: $(OBJS) # $(LISPOBJS)
	cp $(OCAMLSTDLIB)/libasmrun.a $(LIBDIR)/libics.a
	ar r $(LIBDIR)/libics.a $(OBJS)

ics_stub.c ics.h ics.lisp: ics.ml ics.mli ../../chameleon/$(ARCH)/chameleon
	../../chameleon/$(ARCH)/chameleon ics.ml

ics.fasl: ics.lisp
	@ALLEGRO@ -e '(let ((excl:*cltl1-in-package-compatibility-p* t)) \
	(compile-file "ics.lisp") (excl:exit))'

GENERATED = lexer.ml lexer.mli parser.mli parser.ml

### Chameleon

../../chameleon/$(ARCH)/chameleon:
	make -C ../../chameleon all

### Directories

$(BINDIR):	
	-umask 022; if test '!' -d $(BINDIR) ; then \
                      mkdir -p $(BINDIR); fi;

$(OBJDIR):
	-umask 022; if test '!' -d $(OBJDIR) ; then \
           mkdir -p $(OBJDIR); fi; 

$(LIBDIR):
	-umask 022; if test '!' -d $(LIBDIR) ; then \
           mkdir -p $(LIBDIR); fi;

### Source file links

.PRECIOUS : $(OBJDIR)/%.ml $(OBJDIR)/%.mli $(OBJDIR)/%.mly 
.PRECIOUS : $(OBJDIR)/%.mll $(OBJDIR)/mlgmp.c


$(OBJDIR)/%.ml: $(SRCDIR)/%.ml
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mli: $(SRCDIR)/%.mli
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mly: $(SRCDIR)/%.mly
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mll: $(SRCDIR)/%.mll
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/mlgmp.c: $(SRCDIR)/mlgmp.c
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)


### Automated tests

bench:: consistent inconsistent benchmarks

check:: consistent inconsistent

consistent: $(BINDIR)/ics
	@for f in `find tests/consistent/ -maxdepth 1 -type f -print`; \
	do \
	echo -n $$f"..."; \
	$(BINDIR)/ics $$f; \
	done

inconsistent: $(BINDIR)/ics
	@for f in `find tests/inconsistent/ -maxdepth 1 -type f -print`; do \
	echo -n $$f"..."; \
	$(BINDIR)/ics $$f; \
	done

BENCHFILES=linsys-005 linsys-006 linsys-007 linsys-008 linsys-009 linsys-010 \
	   linsys-011 linsys-012 linsys-013 linsys-014 linsys-015 \
           trans-100 trans-200 trans-300 trans-400 trans-500 trans-1000 \
           ineq-010 ineq-020 ineq-030 ineq-040 ineq-050 ineq-060 ineq-070

benchmarks: $(BINDIR)/ics 
	@for f in $(BENCHFILES); do \
	echo -n "bench file $$f..."; \
	time -f "user = %U system = %S" $(BINDIR)/ics tests/bench/$$f > /dev/null;\
	done

PROFFILE = tests/bench/linsys-100

profile:
	make clean
	make OFLAGS=-p ics
	./ics $(PROFFILE)
	gprof $(BINDIR)/ics gmon.out > profile.out

CPROFFILE = tests/bench/trans-1000

cprofile:
	$(MAKE) BFLAGS="" OCAMLC="ocamlcp -p fmt" OCAMLLINK="ocamlcp -p fmt" clean ics.byte
	$(BINDIR)/ics.byte $(CPROFFILE)
	$(MAKE) process.prof

### Tar file

.PHONY : web

LICENSE = fm-license.pdf

web::	
	cp ./bin/$(OBJDIR)/ics $(WEBDIR)/download/$(OBJDIR)/ics     # Save these files before cleaning
	cp ./bin/$(OBJDIR)/ics.byte $(WEBDIR)/download/$(OBJDIR)/ics.byte
	cp ./lib/$(OBJDIR)/libics.so $(WEBDIR)/download/$(OBJDIR)/libics.so
	cp ./lib/$(OBJDIR)/libics.a $(WEBDIR)/download/$(OBJDIR)/libics.a
	cp ./obj/$(OBJDIR)/ics_stub.c $(WEBDIR)/download/$(OBJDIR)/ics_stub.c
	cp ics.tar.gz $(WEBDIR)/download
	cp -rf $(WEBDIR) $(WEBHOME)

ICSDIR = $(shell basename $(PWD))

ics.tar.gz:	distclean
	(cd .. ; tar -cvz --file=$(ICSDIR)/ics.tar.gz --mode="u+rw" --atime-preserve --exclude=CVS --exclude=ics.tar.gz ics)


### Documention

LITERAL = $(addprefix $(DOCDIR)/literal/,$(CMO:.cmo=.ml.tex)) \
          $(addprefix $(DOCDIR)/literal/,$(CMO:.cmo=.mli.tex)) \
          $(DOCDIR)/literal/main.ml.tex \

$(DOCDIR)/literal/%.ml.tex: $(SRCDIR)/%.ml
	$(OCAMLWEB) --no-preamble --no-index --impl $< -o $(DOCDIR)/literal/$(@F)

$(DOCDIR)/literal/%.mli.tex: $(SRCDIR)/%.mli
	$(OCAMLWEB) --no-preamble --no-index --intf $< -o $(DOCDIR)/literal/$(@F)

doc:  $(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.html $(DOCDIR)/doc.pdf
	cp $(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.pdf $(DOCDIR)/doc.html $(WEBHOME)

$(DOCDIR)/doc.dvi: $(LITERAL)  $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); latex ./doc.tex  && latex ./doc.tex)

$(DOCDIR)/doc.pdf: $(LITERAL)  $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); pdflatex ./doc.tex  && pdflatex ./doc.tex)

$(DOCDIR)/doc.ps:  $(DOCDIR)/doc.dvi  $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); dvips ./doc.dvi -o doc.ps)

$(DOCDIR)/doc.ps.gz:  $(DOCDIR)/doc.ps
	gzip -f $(DOCDIR)/doc.ps

$(DOCDIR)/doc.pdf:  $(LITERAL) $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex

$(DOCDIR)/doc.html: $(DOCDIR)/doc.tex $(LITERAL) $(DOCDIR)/dep.gif $(DOCDIR)/doc.tex $(DOCDIR)/docheader.html
	(cd $(DOCDIR); $(HEVEA) $(OCAMLWEBSTY) ./doc.tex -o ./doc.html)

$(DOCDIR)/dep.ps: $(SRC)
	$(OCAMLDEP) -native $(SRC) | ocamldot -lr | dot -Tps > $(DOCDIR)/dep.ps

$(DOCDIR)/dep.gif: $(DOCDIR)/dep.ps


### Emacs tags

tags:
	find . -name "*.ml*" | sort -r | xargs \
        etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/module[ \t]+\([^ \t]+\)/\1/"

### Generic rules

.SUFFIXES: .ml .mli .cmi .cmo .cmx .mll .mly .prof .tex .dvi .ps .html .gif .pdf

.tex.dvi:
	latex $< && latex $<

.dvi.ps: 
	dvips $< -o $@

.ps.gif: 
	pstogif $< -o $@

.tex.pdf:
	pdflatex $< && pdflatex $<

.tex.html:
	$(HEVEA) $< -o $@

.c.o:
	$(OCAMLC) -c -ccopt "-o $@" $(GMPINCLUDE)  $<

.mli.cmi:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmo:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(OFLAGS) -c $<

.mll.ml:
	$(OCAMLLEX) $<

.mll.mli:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) $<

.mly.mli:
	$(OCAMLYACC) $<

.ml.prof:
	ocamlprof $< > $@

.PHONY: clean distclean

clean::	distclean
	rm -f config.cache config.log confdefs.h config.status
	rm -f configure Makefile

distclean::
	rm -f gmon.out
	rm -rf profile.out
	rm -f $(BINDIR)/ics $(BINDIR)/ics.byte 
	rm -rf $(SRCDIR)/parser.output
	rm -rf $(OBJDIR) $(LIBDIR)
	rm -f $(DOCDIR)/*.aux  $(DOCDIR)/*.toc
	rm -f $(DOCDIR)/*.bbl $(DOCDIR)/*.log $(DOCDIR)/*.haux $(DOCDIR)/*.dvi
	rm -f $(DOCDIR)/literal/*.tex
	make -C chameleon clean
	rm -f $(DOCDIR)/*.ppm $(DOCDIR)/*.blg $(DOCDIR)/*.brf $(DOCDIR)/*.out 
	rm -rf $(DOCDIR)/doc/literal/*.tex 
	rm -f $(WEBDIR)/download/ics.tar.gz

# Static dependencies for the generated files.

lexer.ml:  lexer.mll
parser.mli parser.ml: parser.mly

# Dependencies
.depend: $(SRC)
	$(OCAMLDEP) *.mli *.ml > .depend


ifeq ($(MAKELEVEL),1)
include .depend
endif
