### configuration part (done by ./configure) #################################

OCAMLSTDLIB = `ocamlc -v | tail -1 | cut -f 4 -d " "`

CC = @CC@
CXX = @CXX@

LIBGCCA = `@CC@ --print-libgcc`
LIBCPP = `@CC@ --print-file-name=libstdc++.a`

OCAMLC   = @OCAMLC@
OCAMLLINK= @OCAMLMKTOP@
OCAMLOPT = @OCAMLOPT@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLDEP = @OCAMLDEP@
OCAMLMKLIB = @OCAMLMKLIB@
OCAMLDOC = @OCAMLDOC@

DEBUG = @DEBUG@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
LIBS=@LIBS@
CPPFLAGS=@CPPFLAGS@

### end of configuration part ###


ifeq ($(MAKELEVEL),0)
	ARCH := $(shell ./config.guess)
        export ARCH
	OBJDIR = ./obj/$(ARCH)
	BINDIR = ./bin/$(ARCH)
	LIBDIR = ./lib/$(ARCH)
	SRCDIR = ./src
        INCDIR = ./include
	DOCDIR = ./doc
	SATDIR = ./sat
else
	OBJDIR = .
	BINDIR = ../../bin/$(ARCH)
	LIBDIR = ../../lib/$(ARCH)
	SRCDIR = ../../src
	INCDIR = ../../include
	DOCDIR = ../../doc
	SATDIR = ../../sat
endif


### Compilation flags ###

INCLUDE =
CFLAGS = 
BFLAGS = -g $(INCLUDE)

ifeq ($(DEBUG),0)
  OFLAGS = $(INCLUDE) -compact -inline 3 -noassert -unsafe
else
  OFLAGS = $(INCLUDE)	
endif


### Object files ###

COBJS = mlgmp41.o ocaml-signals.o icsat.o licensing.o verify_signature.o

OBJS = ics_all.o ics_stub.o ocaml-signals.o mlgmp41.o icsat.o licensing.o

LISPERROROBJ = ics_lisp_error.o

FOREIGNCMO = dynarray.cmo ptset.cmo ptmap.cmo rbset.cmo gmp41.cmo 

CORECMO = three.cmo \
      mpa.cmo \
      version.cmo \
      tools.cmo \
      pretty.cmo \
      exc.cmo\
      bitv.cmo \
      dom.cmo \
      name.cmo \
      th.cmo \
      trace.cmo \
      sym.cmo \
      var.cmo \
      term.cmo \
      atom.cmo \
      jst.cmo \
      euclid.cmo \
      arith.cmo \
      product.cmo \
      coproduct.cmo \
      bitvector.cmo \
      propset.cmo \
      boolean.cmo \
      funarr.cmo \
      acsym.cmo \
      pprod.cmo \
      apply.cmo \
      app.cmo \
      fact.cmo \
      clause.cmo \
      g.cmo \
      d.cmo \
      v.cmo \
      partition.cmo \
      solution.cmo \
      infsys.cmo \
      shostak.cmo \
      can.cmo \
      u.cmo \
      ac.cmo \
      arr.cmo \
      la.cmo \
      nl.cmo \
      bv.cmo \
      p.cmo \
      pset.cmo \
      l.cmo \
      cop.cmo \
      combine.cmo \
      context.cmo \
      prop.cmo


CMO = $(FOREIGNCMO) \
      $(CORECMO) \
      symtab.cmo istate.cmo \
      parser.cmo lexer.cmo \
      ics.cmo

CMI = $(CMO:.cmo=.cmi)

CMX = $(CMO:.cmo=.cmx)

SRC = $(addprefix $(SRCDIR)/,$(CMO:.cmo=.ml))
SRCMLI = $(addprefix $(SRCDIR)/,$(CMO:.cmo=.mli))

ICSAT= $(SATDIR)/lib/$(ARCH)/icsat.a


### Top level ###

ifeq ($(ARCH), powerpc-apple-darwin6.6)
  TARGETS=$(BINDIR)/ics $(LIBDIR)/libics.a $(BINDIR)/ics.byte $(LIBDIR)/ics.cmxa 
else
  TARGETS=$(BINDIR)/ics $(LIBDIR)/libics.a $(BINDIR)/ics.byte $(LIBDIR)/ics.cmxa $(LIBDIR)/libicsall.so   
endif


.PHONY : all all-chdir
all: $(OBJDIR) $(LIBDIR) $(BINDIR) $(INCDIR) $(ICSAT)
	$(MAKE) -C chameleon all
	$(MAKE) -C $(OBJDIR) -f ../../Makefile all-chdir

all-chdir:$(TARGETS)
	@echo 
	@echo ICS Build complete
	@echo 


TOPCMO = $(CMO) main.cmo
TOPCMI = $(CMI) 

TOPCMX = $(TOPCMO:.cmo=.cmx)

ifeq ($(MAKELEVEL),1)
$(BINDIR)/ics: $(COBJS) $(TOPCMI) $(TOPCMX) $(ICSAT)
	$(OCAMLOPT) -cc $(CXX) $(OFLAGS) -o $@ unix.cmxa $(TOPCMX) $(COBJS) $(LIBS) \
        $(ICSAT)  -ccopt "-lstdc++"
else
ics: $(OBJDIR) # $(ICSAT)
	make -C $(OBJDIR) -f ../../Makefile ics
endif

ifeq ($(MAKELEVEL),1)
$(BINDIR)/ics.byte: $(COBJS) $(TOPCMI) $(TOPCMO)
	$(OCAMLLINK) -cc $(CXX) -g -custom -o $@ unix.cma $(TOPCMO) \
                    $(COBJS) $(LIBS) $(ICSAT)
else
ics.byte: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics.byte
endif


ics_all.o: $(CMX)
	$(OCAMLOPT) -output-obj -o $@ unix.cmxa $(CMX)


$(LIBDIR)/libics.a: $(OBJS)
	$(LD) -r -o $@ $(OBJS) $(ICSAT) \
        $(LIBCPP) \
	$(OCAMLSTDLIB)/libunix.a \
        $(LIBGMPA) $(LIBGCCA) \
	$(OCAMLSTDLIB)/libasmrun.a

$(LIBDIR)/ics.cmxa: $(OBJS) $(ICSAT) $(LISPERROROBJ)
	(cd $(OBJDIR); \
	 $(OCAMLMKLIB) -custom -linkall -o ics unix.cma $(OBJS) $(OBJDIR)/$(CMX) $(SATDIR)/obj/$(ARCH)/*.o \
	               -cclib $(LIBGMPA) -cclib -licsat -cclib $(LIBCPP); \
         cp ics.cmxa ics.cmi ics.a $(LIBDIR); \
	 cp $(ICSAT) $(LIBDIR)/libicsat.a)

                   # For use with Lisp everything, including error function, has to be included
$(LIBDIR)/libicsall.so: $(OBJS) $(ICSAT)
	$(CC) -shared -o $(LIBDIR)/libicsall.so $(OBJS) \
	  $(OCAMLSTDLIB)/libunix.a \
	  $(LIBGMPA) \
          $(ICSAT) \
          $(LIBCPP) \
          $(OBJDIR)/ics_lisp_error.o \
          $(OCAMLSTDLIB)/libasmrun.a


# Following deprecated.
# $(LIBDIR)/libics.a: $(OBJS) $(ICSAT)
#	(cd $(OBJDIR); \
#	 $(OCAMLMKLIB) -oc ics -linkall $(OBJS) $(OBJDIR)/$(CMX) $(SATDIR)/obj/$(ARCH)/*.o \
#                       -cclib $(LIBGMPA) -cclib -cclib $(LIBCPP); \
#	mv libics.a $(LIBDIR))


# Following deprecated.
#$(LIBDIR)/libics.so: $(OBJS) $(ICSAT)
#	$(LD) -r -o $@ $(OBJS) \
#	$(SATDIR)/obj/$(ARCH)/*.o \
#	$(OCAMLSTDLIB)/libunix.a \
#	$(OCAMLSTDLIB)/libasmrun.a


ics_stub.c ics.h ics.lisp: ics.ml ics.mli ../../chameleon/$(ARCH)/chameleon
	../../chameleon/$(ARCH)/chameleon ics.ml
	cp ics.h $(INCDIR)
	cp ics.lisp $(INCDIR)


GENERATED = lexer.ml parser.mli parser.ml


### build ICSAT ###
$(ICSAT) : 
	@(cd $(SATDIR); $(MAKE))


### Directories

$(BINDIR):	
	-umask 022; if test '!' -d $(BINDIR) ; then \
                      mkdir -p $(BINDIR); fi;

$(OBJDIR):
	-umask 022; if test '!' -d $(OBJDIR) ; then \
           mkdir -p $(OBJDIR); fi; 

$(LIBDIR):
	-umask 022; if test '!' -d $(LIBDIR) ; then \
           mkdir -p $(LIBDIR); fi;

$(INCDIR):
	-umask 022; if test '!' -d $(INCDIR) ; then \
           mkdir -p $(INCDIR); fi;

### Source file links

.PRECIOUS : $(OBJDIR)/%.ml $(OBJDIR)/%.mli $(OBJDIR)/%.mly 
.PRECIOUS : $(OBJDIR)/%.mll $(OBJDIR)/%.c

$(OBJDIR)/%.ml: $(SRCDIR)/%.ml
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mli: $(SRCDIR)/%.mli
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mly: $(SRCDIR)/%.mly
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mll: $(SRCDIR)/%.mll
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.c: $(SRCDIR)/%.c
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

# Distribution

ics-2-0.tar.gz:
	(tar -cvz --file=./ics-2-0.tar.gz \
                  --mode="u+rw" \
                  ./README ./Makefile.in ./configure ./configure.in \
                  ./config.guess \
                  ./ics-mode.el \
                  ./fm-license.pdf \
                  ./ics.in \
                  ./src/version.ml.in \
                  ./chameleon/Makefile.in \
                  ./chameleon/src/chameleon.ml \
                  ./chameleon/src/mli_lexer.mll \
                  ./chameleon/src/mli_parser.mly \
                  ./chameleon/src/mli_types.mli \
                  ./$(DOCDIR)/doc.ps.gz  ./$(DOCDIR)/doc.pdf \
                  ./sat/Makefile.in \
                  ./sat/src/*.cpp \
	          ./sat/src/*.h \
                  ./sat/src/*.d \
                  ./sat/src/Makefile.in \
                  ./sat/lib/ \
                  ./src/*.c \
                  ./src/parser.mly \
                  ./src/lexer.mll \
                  ./src/main.ml \
                  ./$(SRC) \
	          ./$(SRCMLI))


### Documention

doc: $(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.pdf $(DOCDIR)/api.tex $(DOCDIR)/dep.ps 

$(DOCDIR)/doc.dvi: $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex $(DOCDIR)/api.tex
	(cd $(DOCDIR); \
         latex ./doc.tex && latex ./doc.tex)

$(DOCDIR)/dep.ps: $(SRC)
	(cd src; $(OCAMLDEP) -native *.ml *.mli | ocamldot | dot -Tps > ../doc/dep.ps)

$(DOCDIR)/api.tex: $(SRCDIR)/ics.mli
	(cd $(OBJDIR); \
	$(OCAMLDOC) -latex -noheader -notrailer -o ../../doc/api.tex ics.mli)

$(DOCDIR)/doc.pdf: $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); pdflatex ./doc.tex  && pdflatex ./doc.tex)

#$(DOCDIR)/doc.pdf: $(DOCDIR)/doc.dvi
#	(cd $(DOCDIR);  \
#	dvips -Ppdf ./doc.dvi -o ./doc-tmp.ps; \
#	ps2pdf ./doc-tmp.ps ./doc.pdf; \
#        rm ./doc-tmp.ps)


$(DOCDIR)/doc.ps:  $(DOCDIR)/doc.dvi $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); dvips ./doc.dvi -o doc.ps)

$(DOCDIR)/doc.ps.gz:  $(DOCDIR)/doc.ps
	gzip -f $(DOCDIR)/doc.ps

$(DOCDIR)/doc.pdf:  $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex

$(DOCDIR)/dep.gif: $(DOCDIR)/dep.ps

### Literate Programming

DOCSOURCES = $(CORECMO:.cmo=.mli) $(CORECMO:.cmo=.ml)

.PHONY: html man

html:
	(cd $(OBJDIR); \
	$(OCAMLDOC) -html -all-params -keep-code -sort -colorize-code -d /homes/ruess/ics/doc/html $(DOCSOURCES))

man:
	(cd $(OBJDIR); \
	$(OCAMLDOC) -man -all-params -keep-code -sort -colorize-code -d /homes/ruess/ics/man $(DOCSOURCES))



### Emacs tags

tags:
	find . -name "*.ml*" | sort -r | xargs \
        etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/module[ \t]+\([^ \t]+\)/\1/"

### Generic rules

.SUFFIXES: .ml .mli .cmi .cmo .cmx .mll .mly .prof .tex .dvi .ps .gif .pdf

.tex.dvi:
	latex $< && latex $<

.dvi.ps: 
	dvips $< -o $@

.ps.gif: 
	pstogif $< -o $@

.tex.pdf:
	pdflatex $< && pdflatex $<

.c.o:
	$(OCAMLC) -c -ccopt "$(CPPFLAGS) -o $@"  $<

.mli.cmi:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmo:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(OFLAGS) -c $<

.mll.ml:
	$(OCAMLLEX) $<

.mll.mli:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) $<

.mly.mli:
	$(OCAMLYACC) $<

.ml.prof:
	ocamlprof $< > $@

.PHONY: clean

clean::
	rm -f config.cache config.log confdefs.h config.status
	rm -f Makefile
	rm -f gmon.out
	rm -rf profile.out
	rm -f $(BINDIR)/ics $(BINDIR)/ics.byte 
	rm -f $(LIBDIR)/*
	rm -f $(INCDIR)/*
	rm -rf $(SRCDIR)/parser.output
	rm -rf $(SRCDIR)/lexer.ml
	rm -rf $(SRCDIR)/lexer.mli
	rm -rf $(SRCDIR)/parser.ml
	rm -rf $(SRCDIR)/parser.mli
	rm -rf obj/*  lib/* bin/*
	rm -f $(DOCDIR)/*.aux  $(DOCDIR)/*.toc
	rm -f $(DOCDIR)/api.tex
	rm -f $(DOCDIR)/*.bbl $(DOCDIR)/*.log $(DOCDIR)/*.haux $(DOCDIR)/*.dvi
	make -C chameleon clean
	rm -f $(DOCDIR)/*.ppm $(DOCDIR)/*.blg $(DOCDIR)/*.brf $(DOCDIR)/*.out 
	rm -rf $(DOCDIR)/html/*
	@(cd sat; $(MAKE) clean)


# Installation

install:
	mkdir -p $(bindir)
	mkdir -p $(libdir)
	mkdir -p $(includedir)
	cp $(BINDIR)/ics $(bindir)
	cp $(LIBDIR)/* $(libdir)
	cp $(OBJDIR)/ics.h $(includedir)
        # mkdir -p $(OCAMLSTDLIB)/ics
        # cp $(ICSAT) $(OCAMLSTDLIB)/ics/libicsat.a

uninstall:
	rm -f $(bindir)/ics
	rm -f $(libdir)/libics.*
	rm -f $(includedir)/ics.h

# Static dependencies for the generated files.

lexer.ml:  lexer.mll

lexer.cmi: lexer.ml
	$(OCAMLC) -c lexer.ml

parser.mli parser.ml: parser.mly

# Dependencies
.depend: $(SRC)
	$(OCAMLDEP) *.mli *.ml main.ml > .depend


ifeq ($(MAKELEVEL),1)
include .depend
endif
