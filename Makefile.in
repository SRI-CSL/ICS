### configuration part (done by ./configure) ###############################

OCAMLSTDLIB = $(shell ocamlc -v | tail -1 | cut -f 4 -d " ")

CC = @CC@
CXX = @CXX@

LIBGCCA = $(shell @CC@ --print-libgcc)
LIBCPP = $(shell @CC@ --print-file-name=libstdc++.a)

OCAMLC   = @OCAMLC@
OCAMLLINK= @OCAMLMKTOP@
OCAMLOPT = @OCAMLOPT@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLDEP = @OCAMLDEP@
OCAMLMKLIB = @OCAMLMKLIB@
OCAMLDOC = @OCAMLDOC@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
LIBS=@LIBS@
MINUS_L_LIBS=@MINUS_L_LIBS@
CPPFLAGS=@CPPFLAGS@
posixos=@posixos@

### end of configuration part ###


ifeq ($(MAKELEVEL),0)
	ARCH := $(shell ./config.guess)
        export ARCH
	OBJDIR = ./obj/$(ARCH)
	BINDIR = ./bin/$(ARCH)
	LIBDIR = ./lib/$(ARCH)
	SRCDIR = ./src
        INCDIR = ./include
	DOCDIR = ./doc
	SATDIR = ./sat
else
	OBJDIR = .
	BINDIR = ../../bin/$(ARCH)
	LIBDIR = ../../lib/$(ARCH)
	SRCDIR = ../../src
	INCDIR = ../../include
	DOCDIR = ../../doc
	SATDIR = ../../sat
endif


### Version ###

VERSION = 2.1
DEBUG = 0


### Compilation flags ###

INCLUDE =
CFLAGS =
BFLAGS = $(INCLUDE)

ifeq ($(DEBUG),0)
  OFLAGS = $(INCLUDE) -compact -inline 3 -noassert -unsafe
else
  OFLAGS = $(INCLUDE)	
endif


### Libraries ###

LIBS_WITH_CCLIB=$(LIBS:%=-cclib %)

MINUS_L_LIBS_WITH_CCLIB=$(MINUS_L_LIBS:%=-cclib %)

OCAMLLIBS= $(OCAMLSTDLIB)/libunix.a $(OCAMLSTDLIB)/libnums.a


### Ocaml sources ###

FOREIGN = dynarray.ml ptmap.ml ptset.ml

GENERATED = parser.ml lexer.ml

CORE = three.ml mpa.ml tools.ml weakhash.ml memoize.ml stacks.ml \
      maps.ml sets.ml version.ml pretty.ml \
      exc.ml bitv.ml euclid.ml dom.ml bdds.ml\
      name.ml  ref.ml \
      theory.ml trace.ml funsym.ml \
      cnstrnt.ml term.ml dep.ml atom.ml judgement.ml \
      g.ml \
      propagate.ml v.ml e.ml \
      solset.ml shostak.ml \
      product.ml \
      axioms.ml can.ml \
      spec.ml \
      u.ml \
      ac.ml linarith.ml \
      simplex.ml \
      coproduct.ml bitvector.ml \
      propset.ml boolean.ml \
      funarr.ml apply.ml \
      nl.ml combine.ml \
      context.ml prop.ml \
      symtab.ml help.ml istate.ml \

ML = $(FOREIGN) $(CORE) $(GENERATED) cmd.ml ics.ml


### Object files ###

COBJS = ocaml-signals.o icsat.o licensing.o verify_signature.o icsversion.o

OBJS = ics_all.o ics_stub.o $(COBJS)

CMO = $(ML:.ml=.cmo)
CMI = $(CMO:.cmo=.cmi)
CMX = $(CMO:.cmo=.cmx)

CMXA = unix.cmxa nums.cmxa 

CMA = $(CMXA:.cmxa=.cma)

ICSAT = $(SATDIR)/lib/$(ARCH)/icsat.a




### Building all targets ###

MINTARGETS= $(BINDIR)/ics $(LIBDIR)/libics.a $(BINDIR)/ics.byte $(LIBDIR)/ics.cmxa 

ifeq ($(posixos),darwin)
  TARGETS=$(MINTARGETS)
else
ifeq ($(posixos),cygwin)
  TARGETS=$(MINTARGETS)
else
  TARGETS=$(MINTARGETS) $(LIBDIR)/libicsall.so $(LIBDIR)/libicslisp.so
endif
endif

.PHONY : all all-chdir
all: $(OBJDIR) $(LIBDIR) $(BINDIR) $(INCDIR) $(ICSAT)
	@echo Targets $(TARGETS)
	$(MAKE) -C chameleon all
	$(MAKE) -C $(OBJDIR) -f ../../Makefile all-chdir

all-chdir: $(TARGETS)
	@echo 
	@echo ICS Build complete
	@echo 


### Building Interactor ###

TOPCMO = $(CMO) main.cmo
TOPCMI = $(CMI) 
TOPCMX = $(TOPCMO:.cmo=.cmx)

ifeq ($(MAKELEVEL),1)
$(BINDIR)/ics: $(COBJS) $(TOPCMI) $(TOPCMX) $(ICSAT)
	$(OCAMLOPT) -cc $(CXX) \
                    $(OFLAGS) -o $@ $(CMXA) $(TOPCMX) $(COBJS) \
                    -ccopt "$(MINUS_L_LIBS)" $(LIBS) \
                    $(ICSAT)  -ccopt "-lstdc++"
else
ics: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics
endif

ifeq ($(MAKELEVEL),1)
$(BINDIR)/ics.byte: $(COBJS) $(TOPCMI) $(TOPCMO) $(ICSAT)
	$(OCAMLLINK) -cc $(CXX) -g -custom -o $@ $(CMA) $(TOPCMO) \
                    $(COBJS) $(LIBS) $(ICSAT)
else
ics.byte: $(OBJDIR)
	make -C $(OBJDIR) -f ../../Makefile ics.byte
endif



### Generic rules ###

.SUFFIXES: .ml .mli .cmi .cmo .cmx .mll .mly .prof .tex .dvi .ps .gif .pdf

.tex.dvi:
	latex $< && latex $<

.dvi.ps: 
	dvips $< -o $@

.ps.gif: 
	pstogif $< -o $@

.tex.pdf:
	pdflatex $< && pdflatex $<

.c.o:
	$(OCAMLC) -c -ccopt "$(CPPFLAGS) -o $@"  $<

.mli.cmi:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmo:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(OFLAGS) -c $<

.mll.ml:
	$(OCAMLLEX) $<

.mll.mli:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) $<

.mly.mli:
	$(OCAMLYACC) $<

.ml.prof:
	ocamlprof $< > $@


### Dependencies ###

lexer.ml:  lexer.mll

lexer.cmi: lexer.ml
	$(OCAMLC) -c lexer.ml

parser.mli parser.ml: parser.mly

.depend: 
	(cd $(OBJDIR); $(OCAMLDEP) *.mli *.ml main.ml > .depend)

ifeq ($(MAKELEVEL),1)
include .depend
endif


### building the SAT solver ###

$(ICSAT): 
	@(cd $(SATDIR); $(MAKE))


### Version ###

$(OBJDIR)/icsversion.o: $(OBJDIR)/icsversion.c
	$(CC) -c -DBUILDDATE='"$(shell date)"' \
               -DVERSION='"$(VERSION)"' \
               -DARCHITECTURE='"$(ARCH)"' \
               -DDEBUG=$(DEBUG) \
               -DCOMPILATION_FLAGS='"$(OFLAGS)"'  \
               $(CPPFLAGS) -I $(OCAMLSTDLIB) -o $@  $<



### Building Libraries ###

ics_all.o: $(CMX)
	$(OCAMLOPT) -output-obj -o $@ $(CMXA) $(CMX)

$(LIBDIR)/libics.a: $(OBJS)
	$(LD) -r -o $@ $(OBJS) $(ICSAT) \
	$(LIBCPP) \
        $(OCAMLLIBS) \
        $(LIBS) $(LIBGCCA) \
	$(OCAMLSTDLIB)/libasmrun.a

$(LIBDIR)/ics.cmxa: $(OBJS) $(ICSAT) 
	(cd $(OBJDIR); \
	 $(OCAMLMKLIB) -custom -linkall -o ics \
	       $(CMX) $(OBJS) $(SATDIR)/obj/$(ARCH)/*.o \
	       $(LIBS_WITH_CCLIB) $(MINUS_L_LIBS_WITH_CCLIB) \
               -cclib -licsat \
              -cclib $(LIBCPP); \
         cp ics.cmxa ics.cmi ics.a $(LIBDIR); \
	 cp $(ICSAT) $(LIBDIR)/libicsat.a)

$(LIBDIR)/libicsall.so: $(OBJS) $(ICSAT)
	$(CC) -shared -o $(LIBDIR)/libicsall.so $(OBJS) \
          $(OCAMLLIBS) \
	  $(LIBS) \
	  $(MINUS_L_LIBS) \
          $(ICSAT) \
          $(LIBCPP) \
          $(OCAMLSTDLIB)/libasmrun.a

$(LIBDIR)/libicslisp.so: $(OBJS) $(ICSAT) $(OBJDIR)/ics_lisp_error.o
	$(CC) -shared -o $(LIBDIR)/libicslisp.so $(OBJS) \
          $(OCAMLLIBS) \
	  $(LIBS) \
	  $(MINUS_L_LIBS) \
          $(ICSAT) \
          $(LIBCPP) \
          $(OBJDIR)/ics_lisp_error.o \
          $(OCAMLSTDLIB)/libasmrun.a

ics_stub.c ics.h ics.lisp: ics.ml ics.mli ../../chameleon/$(ARCH)/chameleon
	../../chameleon/$(ARCH)/chameleon ics.ml
	cp ics.h $(INCDIR)
	cp ics.lisp $(INCDIR)





### Directories ###

$(BINDIR):	
	-umask 022; if test '!' -d $(BINDIR) ; then \
                      mkdir -p $(BINDIR); fi;

$(OBJDIR):
	-umask 022; if test '!' -d $(OBJDIR) ; then \
           mkdir -p $(OBJDIR); fi; 

$(LIBDIR):
	-umask 022; if test '!' -d $(LIBDIR) ; then \
           mkdir -p $(LIBDIR); fi;

$(INCDIR):
	-umask 022; if test '!' -d $(INCDIR) ; then \
           mkdir -p $(INCDIR); fi;


### Source file links ###

.PRECIOUS : $(OBJDIR)/%.ml $(OBJDIR)/%.mli $(OBJDIR)/%.mly 
.PRECIOUS : $(OBJDIR)/%.mll $(OBJDIR)/%.c

$(OBJDIR)/%.ml: $(SRCDIR)/%.ml
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mli: $(SRCDIR)/%.mli
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mly: $(SRCDIR)/%.mly
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mll: $(SRCDIR)/%.mll
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.c: $(SRCDIR)/%.c
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)



### Documention ###

DOCUMENTATION= $(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.pdf $(DOCDIR)/api.tex $(DOCDIR)/dep.ps 

doc: $(DOCUMENTATION)

$(DOCDIR)/doc.dvi: $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex $(DOCDIR)/api.tex
	(cd $(DOCDIR); \
         latex ./doc.tex && latex ./doc.tex)

$(DOCDIR)/dep.ps: $(SRC)
	(cd src; $(OCAMLDEP) -native *.ml *.mli | ocamldot | dot -Tps > ../doc/dep.ps)

$(DOCDIR)/api.tex: $(SRCDIR)/ics.mli
	(cd $(OBJDIR); \
	$(OCAMLDOC) -latex -noheader -notrailer -o ../../doc/api.tex ics.mli)

$(DOCDIR)/doc.pdf: $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); pdflatex ./doc.tex  && pdflatex ./doc.tex)

$(DOCDIR)/doc.ps:  $(DOCDIR)/doc.dvi $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex
	(cd $(DOCDIR); dvips ./doc.dvi -o doc.ps)

$(DOCDIR)/doc.ps.gz:  $(DOCDIR)/doc.ps
	gzip -f $(DOCDIR)/doc.ps

$(DOCDIR)/doc.pdf:  $(DOCDIR)/dep.ps $(DOCDIR)/doc.tex

$(DOCDIR)/dep.gif: $(DOCDIR)/dep.ps


### Literate Programming

DOCSOURCES = $(CORECMO:.cmo=.mli) $(CORECMO:.cmo=.ml)

.PHONY: html man

html:
	(cd $(OBJDIR); \
	$(OCAMLDOC) -html -all-params -keep-code -sort -colorize-code -d /homes/ruess/ics/doc/html $(DOCSOURCES))

man:
	(cd $(OBJDIR); \
	$(OCAMLDOC) -man -all-params -keep-code -sort -colorize-code -d /homes/ruess/ics/man $(DOCSOURCES))



### Emacs tags

tags:
	find . -name "*.ml*" | sort -r | xargs \
        etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/module[ \t]+\([^ \t]+\)/\1/"


### Removing generated files

.PHONY: clean

clean::
	rm -f config.cache config.log confdefs.h config.status
	rm -f gmon.out
	rm -rf profile.out
	rm -f $(BINDIR)/ics $(BINDIR)/ics.byte 
	rm -f $(LIBDIR)/*
	rm -f $(INCDIR)/*
	rm -rf $(SRCDIR)/parser.output
	rm -rf $(SRCDIR)/lexer.ml
	rm -rf $(SRCDIR)/lexer.mli
	rm -rf $(SRCDIR)/parser.ml
	rm -rf $(SRCDIR)/parser.mli
	rm -rf obj/*  lib/* bin/*
	rm -f $(DOCDIR)/*.aux  $(DOCDIR)/*.toc
	rm -f $(DOCDIR)/api.tex
	rm -f $(DOCDIR)/*.bbl $(DOCDIR)/*.log $(DOCDIR)/*.haux $(DOCDIR)/*.dvi
	make -C chameleon clean
	rm -f $(DOCDIR)/*.ppm $(DOCDIR)/*.blg $(DOCDIR)/*.brf $(DOCDIR)/*.out 
	rm -rf $(DOCDIR)/html/*
	@(cd sat; $(MAKE) clean)


### Installation ###

install:
	mkdir -p $(bindir)
	mkdir -p $(libdir)
	mkdir -p $(includedir)
	cp $(BINDIR)/ics $(bindir)
	cp $(LIBDIR)/* $(libdir)
	cp $(OBJDIR)/ics.h $(includedir)
        # mkdir -p $(OCAMLSTDLIB)/ics
        # cp $(ICSAT) $(OCAMLSTDLIB)/ics/libicsat.a

uninstall:
	rm -f $(bindir)/ics
	rm -f $(libdir)/libics.*
	rm -f $(includedir)/ics.h




### Distribution ###

DIST_DIR="ics-$(VERSION)"
BIN_TAR="ics-$(VERSION)-bin-$(ARCH).tar.gz"
SRC_TAR="ics-$(VERSION).tar.gz"

TOP_SRC=./README \
	./Makefile.in \
	./configure \
	./configure.in \
	./config.guess \
	./ics-mode.el \
	./fm-license.pdf \
	./ics.in

DOC_SRC=$(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.pdf


SRCML = $(addprefix $(SRCDIR)/,$(CMO:.cmo=.ml))

SRCMLI = $(addprefix $(SRCDIR)/,$(FOREIGNCMO:.cmo=.mli)) \
         $(addprefix $(SRCDIR)/,$(CORECMO:.cmo=.mli))\
         $(SRCDIR)/symtab.mli \
         $(SRCDIR)/istate.mli \
         $(SRCDIR)/ics.mli

SRCC =  $(addprefix $(SRCDIR)/,$(COBJS))

SRC_SRC=./src/parser.mly ./src/lexer.mll ./src/main.ml $(SRCML) $(SRCMLI) $(SRCC)

CHAMELEON_SRC=./chameleon/Makefile.in \
	 ./chameleon/src/chameleon.ml \
	 ./chameleon/src/mli_lexer.mll \
	 ./chameleon/src/mli_parser.mly \
	./chameleon/src/mli_types.mli

SRC=$(TOP_SRC) $(SRC_SRC) $(CHAMELEON_SRC)

.PHONY : source-distribution binary-distribution

source-distribution: 
	@ echo "Building ICS source distribution..."
	@ rm -r -f $(DIST_DIR)	
	@ mkdir $(DIST_DIR)
	@ mkdir $(DIST_DIR)/doc
	@ mkdir $(DIST_DIR)/src  
	@ mkdir $(DIST_DIR)/sat
	@ mkdir $(DIST_DIR)/sat/src
	@ mkdir $(DIST_DIR)/chameleon
	@ mkdir $(DIST_DIR)/chameleon/src
	@ cp $(TOP_SRC) $(DIST_DIR)
	@ cp -f $(CHAMELEON_SRC) $(DIST_DIR)/chameleon
	@ cp $(DOC_SRC) $(DIST_DIR)/doc
	@ cp ./sat/Makefile.in ./sat/src/*.cpp $(DIST_DIR)/sat
	@ cp ./sat/src/*.cpp ./sat/src/*.h ./sat/src/Makefile.in $(DIST_DIR)/sat/src
	@ cp $(SRC_SRC) $(DIST_DIR)/src
	@ rm -f $(SRC_TAR)
	@ echo "Building TAR ball..."
	@ tar -czf $(SRC_TAR) --mode="u+rw" $(DIST_DIR)
	@ rm -r -f $(DIST_DIR)
	@ echo "Finished building " $(SRC_TAR) 


binary-distribution:
	@ echo "Building ICS binary distribution..."
	@ rm -r -f $(DIST_DIR)
	@ mkdir $(DIST_DIR)
	@ mkdir $(DIST_DIR)/bin
	@ mkdir $(DIST_DIR)/lib
	@ mkdir $(DIST_DIR)/include
	@ mkdir $(DIST_DIR)/doc
	@ mkdir $(DIST_DIR)/examples
	@ cp install.sh $(DIST_DIR)/
	@ chmod +x $(DIST_DIR)/install.sh
	@ cp ics.template $(DIST_DIR)/bin
	@ cp bin/$(ARCH)/ics $(DIST_DIR)/bin/ics.exec
	@ cp bin/$(ARCH)/ics.byte $(DIST_DIR)/bin
	@ cp lib/$(ARCH)/* $(DIST_DIR)/lib
	@ cp include/* $(DIST_DIR)/include
	@ if cp doc/*.ps.gz $(DIST_DIR)/doc; then echo "PS copied with success"; else echo "******* DOCUMENTATION IS MISSING ********"; fi
	@ if cp doc/*.pdf $(DIST_DIR)/doc; then echo "PDF copied with success"; else echo "******* DOCUMENTATION IS MISSING ********"; fi
	@ cp BIN-INSTALL $(DIST_DIR)/INSTALL
	@ cp BIN-README $(DIST_DIR)/README
	@ if test -d examples; then cp examples/demo.ics $(DIST_DIR)/examples; else echo "*************** EXAMPLES ARE MISSING ***************"; fi
	@ rm -f $(BIN_TAR)
	@ echo "Building TAR ball..."
	@ tar -czf $(BIN_TAR) $(DIST_DIR)
	@ echo "Finished building " $(BIN_TAR) 



