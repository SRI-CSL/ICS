
### configuration part (done by ./configure) #################################

OCAMLSTDLIB = `ocamlc -v | tail -1 | cut -f 4 -d " "`

LIBGMPA = /usr/lib/libgmp.a
GMPINCLUDE = -I /usr/include

OCAMLC   = @OCAMLC@
OCAMLLINK= @OCAMLMKTOP@
OCAMLOPT = @OCAMLOPT@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLDEP = @OCAMLDEP@

HEVEA = @HEVEA@
OCAMLWEB = @OCAMLWEB@
OCAMLWEBSTY = $$HOME/tex/ocamlweb.sty

WEBHOME = $$HOME/internal_html/ics

### end of configuration part ################################################

ifeq ($(MAKELEVEL),0)
	ARCH := $(shell bin/config.guess)
        export ARCH
	OBJDIR = ./obj/$(ARCH)
	BINDIR = ./bin/$(ARCH)
	LIBDIR = ./lib/$(ARCH)
	SRCDIR = ./src
	DOCDIR = ./doc
else
	OBJDIR = .
	BINDIR = ../../bin/$(ARCH)
	LIBDIR = ../../lib/$(ARCH)
	SRCDIR = ../../src
	DOCDIR = ../../doc
endif

# Flags

INCLUDE = # -I unify -I fol -I qe
CFLAGS = 
BFLAGS = -g $(INCLUDE) # -noassert
OFLAGS = $(INCLUDE) # -noassert
LIBS = -cclib "-lunix $(LIBGMPA)"

# Object files

COBJS = mlgmp.o

CMO = cmp.cmo gmp.cmo mpa.cmo \
      hashcons.cmo hasht.cmo \
      ptset.cmo ptmap.cmo \
      tools.cmo binrel.cmo \
      trace.cmo \
      interval.cmo \
      bitv.cmo term.cmo exc.cmo\
      cnstrnt.cmo var.cmo bdd.cmo \
      euclid.cmo poly.cmo sets.cmo bool.cmo conc.cmo bv.cmo pretty.cmo arith.cmo \
      tuple.cmo app.cmo \
      funsym.cmo subst.cmo \
      state.cmo solve.cmo process.cmo can.cmo ics.cmo

CMI = $(CMO:.cmo=.cmi)

CMX = $(CMO:.cmo=.cmx)

SRC = $(addprefix $(SRCDIR)/,$(CMO:.cmo=.ml))

.PHONY : all all-chdir
all: $(OBJDIR) $(LIBDIR) $(BINDIR)
	$(MAKE) -C $(OBJDIR) -f ../../Makefile all-chdir

all-chdir: ics $(LIBDIR)/libics.so $(LIBDIR)/libics.a ics.byte $(OBJDIR)/ics-pvs.lisp 
	@echo 
	@echo ICS Build complete
	@echo 


TOPCMO = $(CMO) cmd.cmo parser.cmo lexer.cmo main.cmo
TOPCMI = $(CMI) cmd.cmi parser.cmi 

TOPCMX = $(TOPCMO:.cmo=.cmx)

ics: $(COBJS) $(TOPCMI) $(TOPCMX)
	$(OCAMLOPT) $(OFLAGS) -o $(BINDIR)/$@ unix.cmxa $(TOPCMX) \
                    $(COBJS) $(LIBS)

ics.byte: $(COBJS) $(TOPCMI) $(TOPCMO)
	$(OCAMLLINK) -g -custom -o $(BINDIR)/$@ unix.cma $(TOPCMO) \
                    $(COBJS) $(LIBS)

OBJS = ics_all.o ics_stub.o ics_error.o mlgmp.o
LISPOBJS = ics.fasl ics-pvs.fasl

ics_all.o: $(CMX)
	$(OCAMLOPT) -output-obj -o $@ unix.cmxa $(CMX)

$(LIBDIR)/libics.so: $(OBJS)  $(LISPOBJS)
	gcc -shared -o $(LIBDIR)/libics.so $(OBJS) \
	  $(OCAMLSTDLIB)/libunix.a \
	  $(LIBGMPA) \
          $(OCAMLSTDLIB)/libasmrun.a

$(LIBDIR)/libics.a: $(OBJS) $(LISPOBJS)
	cp $(OCAMLSTDLIB)/libasmrun.a $(LIBDIR)/libics.a
	ar r $(LIBDIR)/libics.a $(OBJS)

ics_stub.c ics.h ics.lisp: ics.ml ics.mli ../../chameleon/$(ARCH)/chameleon
	../../chameleon/$(ARCH)/chameleon ics.ml

ics.fasl: ics.lisp
	@ALLEGRO@ -e '(let ((excl:*cltl1-in-package-compatibility-p* t)) \
                        (compile-file "ics.lisp") (excl:exit))'

ics-pvs.fasl: ics-pvs.lisp
	@ALLEGRO@ -e '(let ((excl:*cltl1-in-package-compatibility-p* t)) \
                        (compile-file "ics-pvs.lisp") (excl:exit))'

GENERATED = lexer.ml parser.mli parser.ml

### Chameleon

../../chameleon/$(ARCH)/chameleon:
	make -C ../../chameleon all

### Directories

$(BINDIR):	
	-umask 022; if test '!' -d $(BINDIR) ; then \
                      mkdir $(BINDIR); fi;

$(OBJDIR):
	-umask 022; if test '!' -d $(OBJDIR) ; then \
           mkdir $(OBJDIR); fi; 

$(LIBDIR):
	-umask 022; if test '!' -d $(LIBDIR) ; then \
           mkdir $(LIBDIR); fi;

### Source file links

.PRECIOUS : $(OBJDIR)/%.ml $(OBJDIR)/%.mli $(OBJDIR)/%.mly 
.PRECIOUS : $(OBJDIR)/%.mll $(OBJDIR)/mlgmp.c
.PRECIOUS : $(OBJDIR)/ics-pvs.lisp $(OBJDIR)/ics_error.c


$(OBJDIR)/%.ml: $(SRCDIR)/%.ml
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mli: $(SRCDIR)/%.mli
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mly: $(SRCDIR)/%.mly
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/%.mll: $(SRCDIR)/%.mll
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/mlgmp.c: $(SRCDIR)/mlgmp.c
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/ics_error.c: $(SRCDIR)/ics_error.c
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

$(OBJDIR)/ics-pvs.lisp: $(SRCDIR)/ics-pvs.lisp
	@(cd $(OBJDIR) ; ln -sf $(SRCDIR)/$(@F) .)

### Automatic tests

bench:: consistent inconsistent benchmarks

check:: consistent inconsistent

consistent: $(BINDIR)/ics
	@for f in `find tests/consistent/ -maxdepth 1 -type f -print`; do \
	echo -n $$f"..."; \
	$(BINDIR)/ics $$f > /dev/null; if [ $$? = 0 ]; then echo "Ok"; else \
          echo "Error! (Should be consistent)"; exit $$?; fi \
	done

inconsistent: $(BINDIR)/ics
	@for f in `find tests/inconsistent/ -maxdepth 1 -type f -print`; do \
	echo -n $$f"..."; \
	$(BINDIR)/ics $$f > /dev/null; if [ $$? = 3 ]; then echo "Ok"; else \
          echo "Error! (Should be inconsistent)"; exit $$?; fi \
	done

BENCHFILES=linsys-005 linsys-006 linsys-007 linsys-008 linsys-009 linsys-010 \
	   linsys-011 linsys-012 linsys-013 linsys-014 linsys-015 \
           trans-100 trans-200 trans-300 trans-400 trans-500 trans-1000 \
           ineq-010 ineq-020 ineq-030 ineq-040 ineq-050 ineq-060 ineq-070

benchmarks: $(BINDIR)/ics 
	@for f in $(BENCHFILES); do \
	echo -n "bench file $$f..."; \
	time -f "user = %U system = %S" $(BINDIR)/ics tests/bench/$$f > /dev/null;\
	done

PROFFILE = tests/bench/linsys-010

profile:
	make clean
	make OFLAGS=-p ics
	$(BINDIR)/ics $(PROFFILE)
	gprof $(BINDIR)/ics gmon.out > profile.out

CPROFFILE = tests/bench/trans-1000

cprofile:
	$(MAKE) BFLAGS="" OCAMLC="ocamlcp -p fmt" OCAMLLINK="ocamlcp -p fmt" clean ics.byte
	$(BINDIR)/ics.byte $(CPROFFILE)
	$(MAKE) process.prof

### Manual

manual: $(DOCDIR)/manual.ps.gz $(DOCDIR)/manual.pdf  $(DOCDIR)/manual.html
	cp $(DOCDIR)/manual.ps.gz $(DOCDIR)/manual.pdf  $(DOCDIR)/manual.html $(WEBHOME)

$(DOCDIR)/manual.dvi: $(DOCDIR)/manual.tex
	(cd $(DOCDIR); (latex ./manual.tex  && latex ./manual.tex))

$(DOCDIR)/manual.ps:  $(DOCDIR)/manual.dvi

$(DOCDIR)/manual.ps.gz:  $(DOCDIR)/manual.ps
	gzip -f $(DOCDIR)/manual.ps

$(DOCDIR)/manual.pdf:  $(DOCDIR)/manual.tex

$(DOCDIR)/manual.html: $(DOCDIR)/manual.tex
	$(HEVEA) $(OCAMLWEBSTY) $(DOCDIR)/manual.tex -o $(DOCDIR)/manual.html


### Documention

OCAMLWEBARGS = \
	$(DOCDIR)/intro.tex \
               $(DOCDIR)/ics.tex \
                  $(SRCDIR)/ics.mli \
               $(DOCDIR)/terms.tex \
                  $(SRCDIR)/term.mli \
               $(DOCDIR)/algo.tex \
                  $(SRCDIR)/process.mli $(SRCDIR)/process.ml \
                  $(SRCDIR)/poly.mli $(SRCDIR)/poly.ml \
                  $(SRCDIR)/state.mli $(SRCDIR)/state.ml \
                  $(SRCDIR)/cmd.mli $(SRCDIR)/cmd.ml \
               $(DOCDIR)/theo.tex \
                  $(SRCDIR)/term.ml $(SRCDIR)/arith.mli \
                  $(SRCDIR)/tuple.mli $(SRCDIR)/tuple.ml \
                  $(SRCDIR)/arrays.mli $(SRCDIR)/arrays.ml \
               $(DOCDIR)/misc.tex \
                  $(SRCDIR)/tools.mli \
                  $(SRCDIR)/main.ml

doc:  $(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.pdf $(DOCDIR)/doc.html
	cp $(DOCDIR)/doc.ps.gz $(DOCDIR)/doc.pdf $(DOCDIR)/doc.html $(WEBHOME)

$(DOCDIR)/doc.dvi: $(DOCDIR)/doc.tex  $(DOCDIR)/dep.ps
	(cd $(DOCDIR); (latex ./doc.tex  && latex ./doc.tex))

$(DOCDIR)/doc.ps:  $(DOCDIR)/doc.dvi  $(DOCDIR)/dep.ps

$(DOCDIR)/doc.ps.gz:  $(DOCDIR)/doc.ps
	gzip -f $(DOCDIR)/doc.ps

$(DOCDIR)/doc.pdf:  $(DOCDIR)/doc.tex

$(DOCDIR)/doc.tex: $(OCAMLWEBARGS) Makefile
	$(OCAMLWEB) --no-preamble -o $(DOCDIR)/doc-input.tex $(OCAMLWEBARGS)

$(DOCDIR)/doc.html: $(DOCDIR)/doc.tex
	$(HEVEA) $(OCAMLWEBSTY) $(DOCDIR)/doc.tex -o $(DOCDIR)/doc.html

$(DOCDIR)/dep.ps: $(SRC)
	$(OCAMLDEP) -native $(SRC) | ocamldot -lr | dot -Tps > $(DOCDIR)/dep.ps

$(DOCDIR)/dep.gif: $(DOCDIR)/dep.ps


### Emacs tags

tags:
	find . -name "*.ml*" | sort -r | xargs \
        etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/module[ \t]+\([^ \t]+\)/\1/"

### Generic rules

.SUFFIXES: .ml .mli .cmi .cmo .cmx .mll .mly .prof .tex .dvi .ps .html .gif .pdf

.tex.dvi:
	latex $< && latex $<

.dvi.ps: 
	dvips $< -o $@

.ps.gif: 
	pstogif $< -o $@

.tex.pdf:
	pdflatex $< && pdflatex $<

.tex.html:
	$(HEVEA) $< -o $@

.c.o:
	$(OCAMLC) -c -ccopt "-o $@" $(GMPINCLUDE)  $<

.mli.cmi:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmo:
	$(OCAMLC) $(BFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(OFLAGS) -c $<

.mll.ml:
	$(OCAMLLEX) $<

.mll.mli:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) $<

.mly.mli:
	$(OCAMLYACC) $<

.ml.prof:
	ocamlprof $< > $@

.PHONY: clean distclean

clean::
	rm -f $(BINDIR)/ics $(BINDIR)/ics.byte 
	rm -rf $(OBJDIR) $(LIBDIR)
	make -C chameleon clean

distclean:: clean
	rm -f config.cache config.log confdefs.h config.status
	rm -f configure Makefile

# Static dependencies for the generated files.

lexer.ml:  lexer.mll
parser.mli parser.ml: parser.mly

# Dependencies
.depend: $(SRC)
	$(OCAMLDEP) *.mli *.ml > .depend


ifeq ($(MAKELEVEL),1)
include .depend
endif

