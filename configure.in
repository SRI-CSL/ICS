dnl ICS autoconf input

dnl make sure we are using a recent autoconf version
AC_PREREQ(2.50)

AC_SUBST(SYSTEM_LIBS)
SYSTEM_LIBS=
AC_DEFUN([CSL_CHECK_DOT_A_LIB],
[ 	
AC_MSG_NOTICE([Trying to find a usable $1])
if test -z "$2"; then
   search_libs=`ld --verbose | grep SEARCH_DIR | sed -e 's,SEARCH_DIR(\"\?,,g' -e 's,\"\?);,,g'`
	 prev_l_opt=false
	 for ld_arg in $LDFLAGS; do
     if test "$prev_l_opt" = "true"; then
        search_libs="$search_libs $ld_arg"
     else 
        if test "$ld_arg" = "-L"; then
           prev_l_opt=true 
        else
           prefix=`echo $ld_arg | cut -c -2`
           body=`echo $ld_arg | cut -c 3-`
           if test "$prefix" = "-L"; then
             search_libs="$search_libs $body"
           else
             prefix=`echo $ld_arg | cut -c -15`
             body=`echo $ld_arg | cut -c 16-`
             if test "$prefix" = "--library-path"; then
               search_libs="$search_libs $body"
             fi
           fi   
        fi
     fi
   done
else
   search_libs=$2/lib
fi
olibs=$LIBS
ocppflags=$CPPFLAGS
LIBPATH=""
for ldir in $search_libs; do
    AC_MSG_CHECKING([for $1 in $ldir])
		found_all="true"
		for target_lib in $1; do 
				if test ! -f $ldir/$target_lib; then
           found_all="false"
        fi
    done
    if test "$found_all" = "true"; then
       AC_MSG_RESULT(found)
			 currlibs=""
       for target_lib in $1; do
         currlibs="$currlibs $ldir/$target_lib"
       done
       LIBS="$currlibs $olibs"
       tmppath=`dirname $ldir`
       CPPFLAGS="-I$tmppath/include $ocppflags"
       AC_TRY_RUN([#include<string.h>
#include<stdlib.h>
$3
int main() {
  $4
  ;
	return 0;
}], target_lib_ok=yes, target_lib_ok=no, target_lib_ok=no)
       AC_MSG_CHECKING([$1 at $ldir])
       if test $target_lib_ok = yes; then
         AC_MSG_RESULT(yes)
         LIBPATH=`dirname $ldir`
         break
       else
         AC_MSG_RESULT(no)
       fi
    else
       AC_MSG_RESULT([not found])
    fi
done
LIBS=$olibs	
CPPFLAGS=$ocppflags
if test -z $LIBPATH; then
   $5
fi
currlibs=""
for target_lib in $1; do
		currlibs="$currlibs $LIBPATH/lib/$target_lib"
done
LIBS="$currlibs $LIBS"
CPPFLAGS="-I$LIBPATH/include $CPPFLAGS"
])


dnl If it doesn't look like GNU Make is being used, give a friendly warning
tem=`make --version -f /dev/null 2>&1 | grep GNU`
if test "x$tem" = "x"; then
  AC_MSG_WARN([You need to use GNU Make when compiling])
fi

dnl begin
AC_INIT(src/ics.mli)

AC_PREFIX_DEFAULT(/usr)

dnl Checking flags
AC_ARG_ENABLE(debug, [  --enable-debug                  turn on debugging [[default=no]]],
if eval "test x$enable_debug = xyes"; then
  CDEBUGFLAG="-g -Wall"
fi)

dnl optionally give path, otherwise use cwd
AC_MSG_CHECKING(icspath)
AC_ARG_WITH(icspath, [ --with-icspath=/path/to/ics ])
AC_ARG_WITH(gmp, [ --with-gmp=/path/to/gmp ])
if test "x$with_icspath" = "x"; then
  ICSPATH=`pwd`
else
  ICSPATH=$with_icspath
fi
if ! test -f $ICSPATH/ics.in; then
  AC_MSG_ERROR(Invalid ICS path)
fi
AC_MSG_RESULT($ICSPATH)
AC_SUBST(ICSPATH)

AC_ARG_WITH(debug, [ --with-debug=0|1|2|...])
  DEBUG=0
AC_MSG_RESULT($DEBUG)
AC_SUBST(DEBUG)

ICSVERSION=`date`
AC_MSG_RESULT($ICSVERSION)
AC_SUBST(ICSVERSION)

dnl Check for programs

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar) 
# are on AIX needs to know the object file format
case "$target" in
  powerpc64*-*-aix*)
    AR="$AR -X 64"
    ;;
esac   


dnl Check for OCaml programs
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi
	
AC_MSG_CHECKING(for $OCAMLC version)
ocamlc_version=`$OCAMLC -v | sed -e 's,[[^0-9.]],,g'`
maj_ocamlc_version=`echo $ocamlc_version | cut -d. -f 1`
min_ocamlc_version=`echo $ocamlc_version | cut -d. -f 2`
if test $maj_ocamlc_version -lt 3 -o \( $maj_ocamlc_version -eq 3 -a $min_ocamlc_version -lt 4 \); then
   AC_MSG_ERROR(Wrong version of $OCAMLC: $ocamlc_version - need at least 3.04)
else
   AC_MSG_RESULT($ocamlc_version)
fi
				
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
if test "$OCAMLOPT" = no ; then
	AC_MSG_ERROR(Cannot find ocamlopt.)
fi
AC_CHECK_PROG(OCAMLMKTOP,ocamlmktop,ocamlmktop,no)
if test "$OCAMLMKTOP" = no ; then
	AC_MSG_ERROR(Cannot find ocamlmktop.)
fi
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
fi
AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
	AC_MSG_ERROR(Cannot find ocamllex.)
fi
AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

AC_CHECK_PROG(OCAMLDOC,ocamldoc,ocamldoc,true)
if test "$OCAMLDOC" = true ; then
	AC_MSG_WARN(Cannot find ocamldoc -- but not mandatory, since only used for generating documentation.)
fi

AC_CHECK_PROG(OCAMLMKLIB,ocamlmklib,ocamlmklib,no)
if test "$OCAMLMKLIB" = no ; then
	AC_MSG_ERROR(Cannot find ocamlmklib.)
fi

AC_SUBST(SHELL)
AC_CHECK_PROG(SHELL,[bash --version],bash,no)
if test "$SHELL" = no; then
	 AC_MSG_ERROR([Cannot find the program (shell) `bash'.])
fi

AC_SUBST(SED)
AC_CHECK_PROG(SED,[sed --version],sed,no)
if test "$SED" = no; then
	 AC_MSG_ERROR([Cannot find the program `sed'.])
fi

dnl Check for library
CSL_CHECK_DOT_A_LIB(libgmp.a, $with_gmp, 
 [ 
   #include<gmp.h> 
 ],
 [ char *p;
   int maj;
   int min;
   p = strdup(__gmp_version);
   maj = atoi(strtok(p, "."));
   min = atoi(strtok(NULL, "."));
   if (maj < 4) exit(1);
   if (maj == 4 && min < 1) exit(1);
 ],
 AC_MSG_ERROR([*** Could not find GMP library (libgmp.a) version >= 4.1. ***])
)

dnl ICS CERTIFICATE Libraries
posixos=`./os`
if test "$posixos" = "sunos"; then
	 AC_CHECK_LIB(socket, htonl, SYSTEM_LIBS="-lsocket $SYSTEM_LIBS", AC_MSG_ERROR([*** SOCKET library not found. ***]))
fi
CSL_CHECK_DOT_A_LIB(libssl.a libcrypto.a, $with_openssl, 
   [	
    #include<openssl/dsa.h>
		#include<openssl/evp.h>
		#include<openssl/pem.h>
		#include<openssl/err.h>
		extern char * DSA_version;
		extern char * SSL_version_str;
		void check_version(char * ver) {
			char * str = strdup(ver);
			char * delim = " .\tABCDEFGHIJKLMNOPQRSTUVZWYZabcdefghijklmnopqrstuvzwyz,.?!@#$%^&*\"'/";
			char * curr = strtok(str, delim);
			int major = curr ? atoi(curr) : -1;
			int minor;
			int patch;
			curr = strtok(0, delim);
			minor = curr ? atoi(curr) : -1;
			curr = strtok(0, delim);
			patch = curr ? atoi(curr) : -1;
			if (major < 0) exit(1);
			if (major == 0 && minor < 9) exit(1);
			if (major == 0 && minor == 9 && patch < 7) exit(1);
		}
   ],
   [
			check_version(DSA_version);
			check_version(SSL_version_str);
			return 0;				
	 ],
 	 AC_MSG_ERROR([*** Could not find OpenSSL. ***]))

dnl UPDATE Flags
if test -n "$CDEBUGFLAG"; then
  CFLAGS="$CDEBUGFLAG"
	CXXFLAGS="$CDEBUGFLAG"
else
	CFLAGS="-O3 -DNDEBUG"
	CXXFLAGS="-O3 -DNDEBUG"
fi				

dnl Finally create all the generated files
AC_OUTPUT(Makefile chameleon/Makefile ics sat/Makefile sat/src/Makefile src/version.ml)

chmod a+x ics
