/* THIS FILE IS AUTOMATICALLY GENERATED */

typedef long value;

value ics_direct_void();
value* ics_void();

value ics_direct_false();
value* ics_false();

value ics_direct_true();
value* ics_true();

value ics_direct_nil();
value* ics_nil();

/* var : string -> term */
value ics_direct_var(char* x1);
value* ics_var(char* x1);

/* app : term -> term list -> term */
value ics_direct_app(value x1, value x2);
value* ics_app(value* x1, value* x2);

/* num : q -> term */
value ics_direct_num(value x1);
value* ics_num(value* x1);

/* plus : term list -> term */
value ics_direct_plus(value x1);
value* ics_plus(value* x1);

/* plus2 : term -> term -> term     */
value ics_direct_plus2(value x1, value x2);
value* ics_plus2(value* x1, value* x2);

/* minus : term -> term -> term */
value ics_direct_minus(value x1, value x2);
value* ics_minus(value* x1, value* x2);

/* unary_minus : term -> term */
value ics_direct_unary_minus(value x1);
value* ics_unary_minus(value* x1);

/* times : term list -> term */
value ics_direct_times(value x1);
value* ics_times(value* x1);

/* times2 : term -> term -> term */
value ics_direct_times2(value x1, value x2);
value* ics_times2(value* x1, value* x2);

/* tup : term list -> term */
value ics_direct_tup(value x1);
value* ics_tup(value* x1);

/* proj : int -> int -> term -> term */
value ics_direct_proj(int x1, int x2, value x3);
value* ics_proj(int x1, int x2, value* x3);

/* update : term -> term -> term -> term */
value ics_direct_update(value x1, value x2, value x3);
value* ics_update(value* x1, value* x2, value* x3);

/* equal : term -> term -> term */
value ics_direct_equal(value x1, value x2);
value* ics_equal(value* x1, value* x2);

/* diseq : term -> term -> term */
value ics_direct_diseq(value x1, value x2);
value* ics_diseq(value* x1, value* x2);

/* lt : term -> term -> term */
value ics_direct_lt(value x1, value x2);
value* ics_lt(value* x1, value* x2);

/* le : term -> term -> term */
value ics_direct_le(value x1, value x2);
value* ics_le(value* x1, value* x2);

/* gt : term -> term -> term */
value ics_direct_gt(value x1, value x2);
value* ics_gt(value* x1, value* x2);

/* ge : term -> term -> term */
value ics_direct_ge(value x1, value x2);
value* ics_ge(value* x1, value* x2);

/* integer_pred : term -> term */
value ics_direct_integer_pred(value x1);
value* ics_integer_pred(value* x1);

/* mem : term -> term -> term */
value ics_direct_mem(value x1, value x2);
value* ics_mem(value* x1, value* x2);

/* unsigned : term -> term */
value ics_direct_unsigned(value x1);
value* ics_unsigned(value* x1);

/* ptrue : unit -> term */
value ics_direct_ptrue();
value* ics_ptrue();

/* pfalse : unit -> term */
value ics_direct_pfalse();
value* ics_pfalse();

/* ite : term -> term -> term -> term */
value ics_direct_ite(value x1, value x2, value x3);
value* ics_ite(value* x1, value* x2, value* x3);

/* forall : (string * constraints) list -> term -> term */
value ics_direct_forall(value x1, value x2);
value* ics_forall(value* x1, value* x2);

/* exists : (string * constraints) list -> term -> term */
value ics_direct_exists(value x1, value x2);
value* ics_exists(value* x1, value* x2);

/* neg : term -> term */
value ics_direct_neg(value x1);
value* ics_neg(value* x1);

/* and : term -> term -> term */
value ics_direct_and(value x1, value x2);
value* ics_and(value* x1, value* x2);

/* or : term -> term -> term */
value ics_direct_or(value x1, value x2);
value* ics_or(value* x1, value* x2);

/* xor : term -> term -> term */
value ics_direct_xor(value x1, value x2);
value* ics_xor(value* x1, value* x2);

/* implies : term -> term -> term */
value ics_direct_implies(value x1, value x2);
value* ics_implies(value* x1, value* x2);

/* equiv : term -> term -> term */
value ics_direct_equiv(value x1, value x2);
value* ics_equiv(value* x1, value* x2);

/* empty_set : int -> term */
value ics_direct_empty_set(int x1);
value* ics_empty_set(int x1);

/* full_set : int -> term */
value ics_direct_full_set(int x1);
value* ics_full_set(int x1);

/* setite : term -> term -> term -> term */
value ics_direct_setite(value x1, value x2, value x3);
value* ics_setite(value* x1, value* x2, value* x3);

/* compl : int -> term -> term */
value ics_direct_compl(int x1, value x2);
value* ics_compl(int x1, value* x2);

/* inter : int -> term -> term -> term */
value ics_direct_inter(int x1, value x2, value x3);
value* ics_inter(int x1, value* x2, value* x3);

/* union : int -> term -> term -> term */
value ics_direct_union(int x1, value x2, value x3);
value* ics_union(int x1, value* x2, value* x3);

/* diff : int -> term -> term -> term */
value ics_direct_diff(int x1, value x2, value x3);
value* ics_diff(int x1, value* x2, value* x3);

/* sym_diff : int -> term -> term -> term */
value ics_direct_sym_diff(int x1, value x2, value x3);
value* ics_sym_diff(int x1, value* x2, value* x3);

/* bv_eps : unit -> term */
value ics_direct_bv_eps();
value* ics_bv_eps();

/* bv_zero : int -> term */
value ics_direct_bv_zero(int x1);
value* ics_bv_zero(int x1);

/* bv_one : int -> term */
value ics_direct_bv_one(int x1);
value* ics_bv_one(int x1);

/* bv_const : string -> term */
value ics_direct_bv_const(char* x1);
value* ics_bv_const(char* x1);

/* bv_conc : int * term -> int * term -> term */
value ics_direct_bv_conc(value x1, value x2);
value* ics_bv_conc(value* x1, value* x2);

/* bv_extr : int * term -> int -> int -> term */
value ics_direct_bv_extr(value x1, int x2, int x3);
value* ics_bv_extr(value* x1, int x2, int x3);

/* bv_and : int -> term -> term -> term */
value ics_direct_bv_and(int x1, value x2, value x3);
value* ics_bv_and(int x1, value* x2, value* x3);

/* bv_or : int -> term -> term -> term */
value ics_direct_bv_or(int x1, value x2, value x3);
value* ics_bv_or(int x1, value* x2, value* x3);

/* bv_xor : int -> term -> term -> term */
value ics_direct_bv_xor(int x1, value x2, value x3);
value* ics_bv_xor(int x1, value* x2, value* x3);

/* fresh : term list -> term */
value ics_direct_fresh(value x1);
value* ics_fresh(value* x1);

/* new_var : string -> term */
value ics_direct_new_var(char* x1);
value* ics_new_var(char* x1);

/* tag : term -> int */
int ics_direct_tag(value x1);
int ics_tag(value* x1);

/* is_var : term -> bool */
int ics_direct_is_var(value x1);
int ics_is_var(value* x1);

/* is_app : term -> bool */
int ics_direct_is_app(value x1);
int ics_is_app(value* x1);

/* is_tup : term -> bool */
int ics_direct_is_tup(value x1);
int ics_is_tup(value* x1);

/* is_proj : term -> bool */
int ics_direct_is_proj(value x1);
int ics_is_proj(value* x1);

/* is_lookup : term -> bool */
int ics_direct_is_lookup(value x1);
int ics_is_lookup(value* x1);

/* is_update : term -> bool */
int ics_direct_is_update(value x1);
int ics_is_update(value* x1);

/* is_ptrue : term -> bool */
int ics_direct_is_ptrue(value x1);
int ics_is_ptrue(value* x1);

/* is_pfalse : term -> bool */
int ics_direct_is_pfalse(value x1);
int ics_is_pfalse(value* x1);

/* is_ite : term -> bool */
int ics_direct_is_ite(value x1);
int ics_is_ite(value* x1);

/* is_equal : term -> bool */
int ics_direct_is_equal(value x1);
int ics_is_equal(value* x1);

/* is_lt : term -> bool */
int ics_direct_is_lt(value x1);
int ics_is_lt(value* x1);

/* is_le : term -> bool */
int ics_direct_is_le(value x1);
int ics_is_le(value* x1);

/* is_empty_set : term -> bool */
int ics_direct_is_empty_set(value x1);
int ics_is_empty_set(value* x1);

/* is_full_set : term -> bool */
int ics_direct_is_full_set(value x1);
int ics_is_full_set(value* x1);

/* is_compl : term -> bool */
int ics_direct_is_compl(value x1);
int ics_is_compl(value* x1);

/* is_inter : term -> bool */
int ics_direct_is_inter(value x1);
int ics_is_inter(value* x1);

/* is_union : term -> bool */
int ics_direct_is_union(value x1);
int ics_is_union(value* x1);

/* is_setite : term -> bool */
int ics_direct_is_setite(value x1);
int ics_is_setite(value* x1);

/* pp_term : term -> unit */
void ics_direct_pp_term(value x1);
void ics_pp_term(value* x1);

/* eq_term : term -> term -> bool */
int ics_direct_eq_term(value x1, value x2);
int ics_eq_term(value* x1, value* x2);

/* compare : term -> term -> int */
int ics_direct_compare(value x1, value x2);
int ics_compare(value* x1, value* x2);

/* set_verbose : int -> unit */
void ics_direct_set_verbose(int x1);
void ics_set_verbose(int x1);

/* empty_state : unit -> state */
value ics_direct_empty_state();
value* ics_empty_state();

/* find : state -> term -> term */
value ics_direct_find(value x1, value x2);
value* ics_find(value* x1, value* x2);

/* use : state -> term -> term list */
value ics_direct_use(value x1, value x2);
value* ics_use(value* x1, value* x2);

/* pp_find : state -> unit */
void ics_direct_pp_find(value x1);
void ics_pp_find(value* x1);

/* pp_use : state -> unit */
void ics_direct_pp_use(value x1);
void ics_pp_use(value* x1);

/* pp_universe : state -> unit */
void ics_direct_pp_universe(value x1);
void ics_pp_universe(value* x1);

/* universe : state -> term -> bool */
int ics_direct_universe(value x1, value x2);
int ics_universe(value* x1, value* x2);

/* is_consistent : result -> bool */
int ics_direct_is_consistent(value x1);
int ics_is_consistent(value* x1);

/* is_redundant : result -> bool */
int ics_direct_is_redundant(value x1);
int ics_is_redundant(value* x1);

/* is_inconsistent : result -> bool */
int ics_direct_is_inconsistent(value x1);
int ics_is_inconsistent(value* x1);

/* is_valid : state -> term -> bool */
int ics_direct_is_valid(value x1, value x2);
int ics_is_valid(value* x1, value* x2);

/* is_unsat : state -> term -> bool */
int ics_direct_is_unsat(value x1, value x2);
int ics_is_unsat(value* x1, value* x2);

/* process : state -> term -> result */
value ics_direct_process(value x1, value x2);
value* ics_process(value* x1, value* x2);

/* process_list : state -> term list -> result */
value ics_direct_process_list(value x1, value x2);
value* ics_process_list(value* x1, value* x2);

/* norm : state -> term -> term */
value ics_direct_norm(value x1, value x2);
value* ics_norm(value* x1, value* x2);

/* canon : state -> term -> term */
value ics_direct_canon(value x1, value x2);
value* ics_canon(value* x1, value* x2);

/* reset : unit -> unit */
void ics_direct_reset();
void ics_reset();

/* gc : unit -> unit */
void ics_direct_gc();
void ics_gc();

/* flush : unit -> unit */
void ics_direct_flush();
void ics_flush();

/* empty_istate : unit -> istate */
value ics_direct_empty_istate();
value* ics_empty_istate();

/* current_state : istate -> state */
value ics_direct_current_state(value x1);
value* ics_current_state(value* x1);

/* push : istate -> unit */
void ics_direct_push(value x1);
void ics_push(value* x1);

/* pop : istate -> unit */
void ics_direct_pop(value x1);
void ics_pop(value* x1);

/* iprocess : istate -> term -> result */
value ics_direct_iprocess(value x1, value x2);
value* ics_iprocess(value* x1, value* x2);

/* is_nil : 'a list -> bool */
int ics_direct_is_nil(value x1);
int ics_is_nil(value* x1);

/* cons : 'a -> 'a list -> 'a list */
value ics_direct_cons(value x1, value x2);
value* ics_cons(value* x1, value* x2);

/* head : 'a list -> 'a */
value ics_direct_head(value x1);
value* ics_head(value* x1);

/* tail : 'a list -> 'a list */
value ics_direct_tail(value x1);
value* ics_tail(value* x1);

/* pair : 'a -> 'b -> 'a * 'b */
value ics_direct_pair(value x1, value x2);
value* ics_pair(value* x1, value* x2);

/* fst : 'a * 'b -> 'a */
value ics_direct_fst(value x1);
value* ics_fst(value* x1);

/* snd : 'a * 'b -> 'b  */
value ics_direct_snd(value x1);
value* ics_snd(value* x1);

/* num_of_int : int -> q */
value ics_direct_num_of_int(int x1);
value* ics_num_of_int(int x1);

/* string_of_num : q -> string */
char* ics_direct_string_of_num(value x1);
char* ics_string_of_num(value* x1);

/* num_of_string : string -> q */
value ics_direct_num_of_string(char* x1);
value* ics_num_of_string(char* x1);
